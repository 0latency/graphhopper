 * use ch stuff
 * use a-star (or other heuristic) as guide
 * Voronoi regions
 * read paper:
     alternative paths http://www.bing.com/community/site_blogs/b/maps/archive/2012/01/05/bing-maps-new-routing-engine.aspx -> http://research.microsoft.com/apps/pubs/default.aspx?id=145688
     public transport  http://research.microsoft.com/pubs/156567/raptor_alenex.pdf
 
 * recognize turn restrictions (e.g. "only left") -> create special graph with directed nodes
   E.g.:
       D                               D<-
       |                               |  \
   A - B  + only from C to D  =>   A - B  |
       |                               \  |
       C    









graphdb via lucene. have a look:
    http://groups.google.com/group/orient-database/browse_thread/thread/c48a3a7abac30245



wraparound problem: http://stackoverflow.com/questions/2398954/spatial-index-for-geo-coordinates
   geo coordinates have limitations near the poles
   and the normal search has problems near the international date line

compare this to
 lucene geo stuff
 jsi.sourceforge.net
 spatialite http://www.bostongis.com/PrinterFriendly.aspx?content_name=spatialite_tut01
 PostGIS
 neo4j spatial stuff

most efficient collection api (in terms of mem + cpu)
 java.util + java.util.concurrent
 trove http://trove.starlight-systems.com/
 guava http://code.google.com/p/guava-libraries/
 pcj   not maintained http://pcj.sourceforge.net/
 javolution.org 

lucene
======
  http://www.searchworkings.org/blog/-/blogs/24048/maximized
  http://code.google.com/p/spatial-search-lucene/source/browse/trunk/src/main/java/org/apache/lucene/spatial/SpatialFilter.java?r=40 
  http://www.searchworkings.org/blog/-/blogs/23842
  http://sourceforge.net/projects/geolucene/ -> uses rtree + lucene combination
  http://stackoverflow.com/questions/7799308/implement-spatial-queries-with-numericrangequery-in-lucene

ALGO for nearest neightbour search in 3D (2d and time)
===========================
 http://stackoverflow.com/questions/6355964/data-structure-for-spacial-data
 https://github.com/libspatialindex/libspatialindex
 http://stackoverflow.com/questions/551632/pre-rtree-step-divide-a-set-of-points-into-rectangular-regions-each-containing
 http://stackoverflow.com/questions/2856992/google-maps-given-a-point-how-to-find-all-points-at-a-given-road-distance
    really slow but nice idea: do not use simple rectangle or circle use real road distance!

 use 3*2 indices via b-tree and then do AND operation (db, lucene/elasticsearch)
   this might be the best for only a few available paths (<100k)
 use r-tree or variants
 use quad-tree or variants (e.g. pseudo quadtree http://www.cs.uu.nl/research/techreps/repo/CS-1980/1980-02.pdf)
 use k-d tree      http://en.wikipedia.org/wiki/Kd-tree
 sweep and prune   http://en.wikipedia.org/wiki/Sweep_and_prune

shortest path stuff
===================
 http://algo2.iti.kit.edu/1040.php
 http://research.microsoft.com/en-us/people/goldberg/ 

OSM == OpenStreetMap reading data
=================================
 http://help.openstreetmap.org/questions/15/getting-point-of-interest-data-from-openstreetmap


OVERALL PROCESS for algorithm
===============
1. set up 'static graph' via open street map => points and edges with weights (e.g. max velocity)
   update this graph weekly
2. fill 'fluent graph' with paths from db (do it weekly but keep e.g. 1 month in RAM => delete all stuff)
   use points etc from 'static graph'
3. query => search routes in the 'fluent graph' near the query start+end points
4. book parts of one or more paths for one route. decrease capacity of those path-parts
5. if user is interested => query driver if its ok (e.g. if path changes are required, exact time, etc)
   (active vs. passive passenger)
   calculate possible time and road changes from 'static graph'
   a fast shortest path algo on 'static graph' necessary! (but only for a small graph subset)